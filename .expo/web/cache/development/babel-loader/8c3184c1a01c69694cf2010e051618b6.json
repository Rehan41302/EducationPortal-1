{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar RNDocumentPicker = NativeModules.RNDocumentPicker;\n\nif (!RNDocumentPicker) {\n  setTimeout(function () {\n    console.warn('RNDocumentPicker: Native module is not available, make sure you have finished the installation process and rebuilt your app');\n  }, 0);\n} else if (!RNDocumentPicker.pick && RNDocumentPicker.show) {\n  setTimeout(function () {\n    console.warn('RNDocumentPicker: Native module is obsolete, you may not have rebuilt your app after upgrading the library');\n  }, 0);\n}\n\nvar E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED';\n\nfunction _pick(opts) {\n  if ('filetype' in opts) {\n    throw new TypeError('A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`');\n  }\n\n  if ('types' in opts) {\n    throw new TypeError('A `types` option was passed to DocumentPicker.pick, the correct option is `type`');\n  }\n\n  if (!('type' in opts)) {\n    opts.type = DocumentPicker.types.allFiles;\n  }\n\n  opts.type = Array.isArray(opts.type) ? opts.type : [opts.type];\n\n  if (opts.type.some(function (type) {\n    return type === undefined;\n  })) {\n    throw new TypeError('Unexpected undefined type option, did you try using a DocumentPicker.types.* that does not exist?');\n  }\n\n  if (Array.isArray(opts.type) && opts.type.length < 1) {\n    throw new TypeError('`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted');\n  }\n\n  opts.type.forEach(function (type) {\n    if (typeof type !== 'string') {\n      throw new TypeError('Invalid type option, expected a string not: ' + type);\n    }\n  });\n\n  if (opts.type.length > 1 && Platform.OS === 'android' && Platform.Version < 19) {\n    console.warn(\"RNDocumentPicker: Android API level \" + Platform.Version + \" does not support multiple types, falling back to */*\");\n  }\n\n  if ('copyTo' in opts && !['cachesDirectory', 'documentDirectory'].includes(opts.copyTo)) {\n    throw new TypeError('Invalid copyTo option: ' + opts.copyTo);\n  }\n\n  return RNDocumentPicker.pick(opts);\n}\n\nvar Types = {\n  mimeTypes: {\n    allFiles: '*/*',\n    audio: 'audio/*',\n    csv: 'text/csv',\n    doc: 'application/msword',\n    docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    images: 'image/*',\n    pdf: 'application/pdf',\n    plainText: 'text/plain',\n    ppt: 'application/vnd.ms-powerpoint',\n    pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    video: 'video/*',\n    xls: 'application/vnd.ms-excel',\n    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    zip: 'application/zip'\n  },\n  utis: {\n    allFiles: 'public.content',\n    audio: 'public.audio',\n    csv: 'public.comma-separated-values-text',\n    doc: 'com.microsoft.word.doc',\n    docx: 'org.openxmlformats.wordprocessingml.document',\n    images: 'public.image',\n    pdf: 'com.adobe.pdf',\n    plainText: 'public.plain-text',\n    ppt: 'com.microsoft.powerpoint.ppt',\n    pptx: 'org.openxmlformats.presentationml.presentation',\n    video: 'public.movie',\n    xls: 'com.microsoft.excel.xls',\n    xlsx: 'org.openxmlformats.spreadsheetml.sheet',\n    zip: 'public.zip-archive'\n  },\n  extensions: {\n    allFiles: '*',\n    audio: '.3g2 .3gp .aac .adt .adts .aif .aifc .aiff .asf .au .m3u .m4a .m4b .mid .midi .mp2 .mp3 .mp4 .rmi .snd .wav .wax .wma',\n    csv: '.csv',\n    doc: '.doc',\n    docx: '.docx',\n    images: '.jpeg .jpg .png',\n    pdf: '.pdf',\n    plainText: '.txt',\n    ppt: '.ppt',\n    pptx: '.pptx',\n    video: '.mp4',\n    xls: '.xls',\n    xlsx: '.xlsx',\n    zip: '.zip .gz'\n  }\n};\nvar PlatformTypes = {\n  android: Types.mimeTypes,\n  ios: Types.utis,\n  windows: Types.extensions\n};\n\nvar DocumentPicker = function () {\n  function DocumentPicker() {\n    _classCallCheck(this, DocumentPicker);\n  }\n\n  _createClass(DocumentPicker, null, [{\n    key: \"pick\",\n    value: function pick(opts) {\n      var options = _objectSpread(_objectSpread({}, opts), {}, {\n        multiple: false\n      });\n\n      return _pick(options).then(function (results) {\n        return results[0];\n      });\n    }\n  }, {\n    key: \"pickMultiple\",\n    value: function pickMultiple(opts) {\n      var options = _objectSpread(_objectSpread({}, opts), {}, {\n        multiple: true\n      });\n\n      return _pick(options);\n    }\n  }, {\n    key: \"isCancel\",\n    value: function isCancel(err) {\n      return err && err.code === E_DOCUMENT_PICKER_CANCELED;\n    }\n  }]);\n\n  return DocumentPicker;\n}();\n\nDocumentPicker.types = PlatformTypes[Platform.OS] || Types.mimeTypes;\nexport { DocumentPicker as default };","map":{"version":3,"sources":["/Users/denoversshehroz/Documents/React Native/Rehan/EducationPortal/node_modules/react-native-document-picker/index.js"],"names":["RNDocumentPicker","NativeModules","setTimeout","console","warn","pick","show","E_DOCUMENT_PICKER_CANCELED","opts","TypeError","type","DocumentPicker","types","allFiles","Array","isArray","some","undefined","length","forEach","Platform","OS","Version","includes","copyTo","Types","mimeTypes","audio","csv","doc","docx","images","pdf","plainText","ppt","pptx","video","xls","xlsx","zip","utis","extensions","PlatformTypes","android","ios","windows","options","multiple","then","results","err","code"],"mappings":"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","sourcesContent":["'use strict';\nimport { Platform, NativeModules } from 'react-native';\nconst { RNDocumentPicker } = NativeModules;\n\nif (!RNDocumentPicker) {\n  // Use a timeout to ensure the warning is displayed in the YellowBox\n  setTimeout(() => {\n    console.warn(\n      'RNDocumentPicker: Native module is not available, make sure you have finished the installation process and rebuilt your app'\n    );\n  }, 0);\n} else if (!RNDocumentPicker.pick && RNDocumentPicker.show) {\n  // Use a timeout to ensure the warning is displayed in the YellowBox\n  setTimeout(() => {\n    console.warn(\n      'RNDocumentPicker: Native module is obsolete, you may not have rebuilt your app after upgrading the library'\n    );\n  }, 0);\n}\n\nconst E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED';\n\nfunction pick(opts) {\n  if ('filetype' in opts) {\n    throw new TypeError(\n      'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`'\n    );\n  }\n  if ('types' in opts) {\n    throw new TypeError(\n      'A `types` option was passed to DocumentPicker.pick, the correct option is `type`'\n    );\n  }\n\n  if (!('type' in opts)) {\n    opts.type = DocumentPicker.types.allFiles;\n  }\n\n  opts.type = Array.isArray(opts.type) ? opts.type : [opts.type];\n\n  if (opts.type.some((type) => type === undefined)) {\n    throw new TypeError(\n      'Unexpected undefined type option, did you try using a DocumentPicker.types.* that does not exist?'\n    );\n  }\n\n  if (Array.isArray(opts.type) && opts.type.length < 1) {\n    throw new TypeError(\n      '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted'\n    );\n  }\n\n  opts.type.forEach((type) => {\n    if (typeof type !== 'string') {\n      throw new TypeError('Invalid type option, expected a string not: ' + type);\n    }\n  });\n\n  if (opts.type.length > 1 && Platform.OS === 'android' && Platform.Version < 19) {\n    console.warn(\n      `RNDocumentPicker: Android API level ${Platform.Version} does not support multiple types, falling back to */*`\n    );\n  }\n\n  if ('copyTo' in opts && !['cachesDirectory', 'documentDirectory'].includes(opts.copyTo)) {\n    throw new TypeError('Invalid copyTo option: ' + opts.copyTo);\n  }\n\n  return RNDocumentPicker.pick(opts);\n}\n\nconst Types = {\n  mimeTypes: {\n    allFiles: '*/*',\n    audio: 'audio/*',\n    csv: 'text/csv',\n    doc: 'application/msword',\n    docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    images: 'image/*',\n    pdf: 'application/pdf',\n    plainText: 'text/plain',\n    ppt: 'application/vnd.ms-powerpoint',\n    pptx: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    video: 'video/*',\n    xls: 'application/vnd.ms-excel',\n    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    zip: 'application/zip',\n  },\n  utis: {\n    allFiles: 'public.content',\n    audio: 'public.audio',\n    csv: 'public.comma-separated-values-text',\n    doc: 'com.microsoft.word.doc',\n    docx: 'org.openxmlformats.wordprocessingml.document',\n    images: 'public.image',\n    pdf: 'com.adobe.pdf',\n    plainText: 'public.plain-text',\n    ppt: 'com.microsoft.powerpoint.ppt',\n    pptx: 'org.openxmlformats.presentationml.presentation',\n    video: 'public.movie',\n    xls: 'com.microsoft.excel.xls',\n    xlsx: 'org.openxmlformats.spreadsheetml.sheet',\n    zip: 'public.zip-archive',\n  },\n  extensions: {\n    allFiles: '*',\n    audio:\n      '.3g2 .3gp .aac .adt .adts .aif .aifc .aiff .asf .au .m3u .m4a .m4b .mid .midi .mp2 .mp3 .mp4 .rmi .snd .wav .wax .wma',\n    csv: '.csv',\n    doc: '.doc',\n    docx: '.docx',\n    images: '.jpeg .jpg .png',\n    pdf: '.pdf',\n    plainText: '.txt',\n    ppt: '.ppt',\n    pptx: '.pptx',\n    video: '.mp4',\n    xls: '.xls',\n    xlsx: '.xlsx',\n    zip: '.zip .gz',\n  },\n};\n\nconst PlatformTypes = {\n  android: Types.mimeTypes,\n  ios: Types.utis,\n  windows: Types.extensions,\n};\n\nexport default class DocumentPicker {\n  /**\n   * Android requires mime types, iOS is a bit more complicated:\n   *\n   * @see https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html\n   */\n  static types = PlatformTypes[Platform.OS] || Types.mimeTypes;\n\n  static pick(opts) {\n    const options = {\n      ...opts,\n      multiple: false,\n    };\n\n    return pick(options).then((results) => results[0]);\n  }\n\n  static pickMultiple(opts) {\n    const options = {\n      ...opts,\n      multiple: true,\n    };\n\n    return pick(options);\n  }\n\n  static isCancel(err) {\n    return err && err.code === E_DOCUMENT_PICKER_CANCELED;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}