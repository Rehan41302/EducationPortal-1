{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/denoversshehroz/Documents/React Native/Rehan/EducationPortal/components/tutordashboard/QuizUpload.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport firebase from \"../../config/fire\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as DocumentPicker from \"expo-document-picker\";\nimport { Avatar, Button, Card, Title, Paragraph } from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { firestore } from \"firebase\";\n\nvar QuizUpload = function (_React$Component) {\n  _inherits(QuizUpload, _React$Component);\n\n  var _super = _createSuper(QuizUpload);\n\n  function QuizUpload() {\n    var _this;\n\n    _classCallCheck(this, QuizUpload);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      fullPath: \"\",\n      downloadURL: \"\",\n      progress: 0,\n      uploading: false\n    };\n\n    _this.pickDocumentPDF = function _callee() {\n      var res, that, getTime, storageRef, ref, fullPath, uploadTask;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(DocumentPicker.getDocumentAsync({\n                type: \"application/pdf\"\n              }));\n\n            case 3:\n              res = _context.sent;\n              console.log(\"res : \" + JSON.stringify(res));\n              console.log(\"Type : \" + res.type);\n\n              if (res.type === \"success\") {\n                _this.setState({\n                  uploading: true\n                });\n\n                that = _assertThisInitialized(_this);\n                getTime = new Date().getTime();\n                storageRef = firebase.storage().ref();\n                ref = storageRef.child(\"/quiz/\" + getTime + \"-\" + res.name);\n                fullPath = ref.fullPath;\n                uploadTask = ref.putString(res.uri, \"data_url\");\n                uploadTask.on(\"state_changed\", function (snapshot) {\n                  var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n                  console.log(\"Upload is \" + progress + \"% done\");\n                  that.setState({\n                    progress: Math.round(progress)\n                  });\n                }, function (error) {\n                  console.error(error.message);\n                  Alert.alert(error.message);\n                }, function () {\n                  var _that$props, _that$props$user;\n\n                  var prevQuiz = ((_that$props = that.props) == null ? void 0 : (_that$props$user = _that$props.user) == null ? void 0 : _that$props$user.quiz) || [];\n                  uploadTask.snapshot.ref.getDownloadURL().then(function (downloadURL) {\n                    var _that$props$user2;\n\n                    console.log(\"File available at\", downloadURL);\n                    var db = firebase.firestore();\n                    db.collection(\"tutors\").doc((_that$props$user2 = that.props.user) == null ? void 0 : _that$props$user2.id).set(_objectSpread(_objectSpread({}, that.props.user), {}, {\n                      quiz: [].concat(_toConsumableArray(prevQuiz), [{\n                        uploadTime: firestore.Timestamp.now(),\n                        pdfLink: downloadURL,\n                        storageAddress: fullPath\n                      }])\n                    })).then(function () {\n                      that.setState({\n                        uploading: false,\n                        downloadURL: downloadURL,\n                        fullPath: fullPath\n                      });\n                    }).catch(function (error) {\n                      console.error(error);\n                      Alert.alert(error.message);\n                    });\n                  }).catch(function (error) {\n                    console.error(error);\n                    Alert.alert(error.message);\n                  });\n                });\n              }\n\n              _context.next = 13;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              alert(\"Unknown Error: \" + JSON.stringify(_context.t0));\n              throw _context.t0;\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(QuizUpload, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var user = this.props.user;\n      console.log({\n        user: user\n      });\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 7\n        }\n      }, (user == null ? void 0 : user.quiz) && user.quiz.map(function (quiz) {\n        React.createElement(Card, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }\n        }, React.createElement(Card.Title, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }\n        }), React.createElement(Card.Content, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }\n        }, React.createElement(Title, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 17\n          }\n        }, \"Qiuz Uploads \"), React.createElement(Paragraph, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }\n        }, \"Uploaded: \", quiz.uploadTime, \" \")), React.createElement(Card.Actions, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }\n        }, React.createElement(Button, {\n          onPress: _this2.pickDocumentPDF,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }\n        }, _this2.state.uploading ? \"Uploading \" + _this2.state.progress + \"%\" : \"Upload\")));\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, this.state.fullPath), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }\n      }, this.state.downloadURL));\n    }\n  }]);\n\n  return QuizUpload;\n}(React.Component);\n\nvar mapStatetoProps = function mapStatetoProps(state) {\n  console.log({\n    state: state\n  });\n  return {\n    user: state.authReducer.user,\n    isAuthenticated: state.authReducer.isAuthenticated\n  };\n};\n\nexport default connect(mapStatetoProps)(QuizUpload);","map":{"version":3,"sources":["/Users/denoversshehroz/Documents/React Native/Rehan/EducationPortal/components/tutordashboard/QuizUpload.js"],"names":["React","firebase","DocumentPicker","Avatar","Button","Card","Title","Paragraph","connect","firestore","QuizUpload","state","fullPath","downloadURL","progress","uploading","pickDocumentPDF","getDocumentAsync","type","res","console","log","JSON","stringify","setState","that","getTime","Date","storageRef","storage","ref","child","name","uploadTask","putString","uri","on","snapshot","bytesTransferred","totalBytes","Math","round","error","message","Alert","alert","prevQuiz","props","user","quiz","getDownloadURL","then","db","collection","doc","id","set","uploadTime","Timestamp","now","pdfLink","storageAddress","catch","map","Component","mapStatetoProps","authReducer","isAuthenticated"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport firebase from \"../../config/fire\";\nimport {\n  Text,\n  View,\n  StyleSheet,\n  Image,\n  ScrollView,\n  TextInput,\n  TouchableOpacity,\n  ImageBackground,\n  Alert\n} from \"react-native\";\nimport * as DocumentPicker from \"expo-document-picker\";\nimport { Avatar, Button, Card, Title, Paragraph } from \"react-native-paper\";\nimport { connect } from \"react-redux\";\nimport { firestore } from \"firebase\";\n\nclass QuizUpload extends React.Component {\n  state = {\n    fullPath: \"\",\n    downloadURL: \"\",\n    progress: 0,\n    uploading: false\n  };\n\n  pickDocumentPDF = async () => {\n    try {\n      const res = await DocumentPicker.getDocumentAsync({\n        type: \"application/pdf\"\n      });\n      //Printing the log realted to the file\n      console.log(\"res : \" + JSON.stringify(res));\n      console.log(\"Type : \" + res.type);\n      if (res.type === \"success\") {\n        this.setState({ uploading: true });\n        let that = this;\n        let getTime = new Date().getTime();\n        let storageRef = firebase.storage().ref();\n        let ref = storageRef.child(`/quiz/${getTime}-${res.name}`);\n        let fullPath = ref.fullPath;\n        let uploadTask = ref.putString(res.uri, \"data_url\");\n        // New Addintion\n        uploadTask.on(\n          \"state_changed\",\n          function(snapshot) {\n            // Observe state change events such as progress, pause, and resume\n            // Get task progress, including the number of bytes uploaded and the total number of bytes to be uploaded\n            var progress =\n              (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            console.log(\"Upload is \" + progress + \"% done\");\n            that.setState({\n              progress: Math.round(progress)\n            });\n          },\n          function(error) {\n            // Handle unsuccessful uploads\n            console.error(error.message);\n            Alert.alert(error.message);\n          },\n          function() {\n            // Handle successful uploads on complete\n            let prevQuiz = that.props?.user?.quiz || [];\n            uploadTask.snapshot.ref\n              .getDownloadURL()\n              .then(function(downloadURL) {\n                console.log(\"File available at\", downloadURL);\n                const db = firebase.firestore();\n                db.collection(\"tutors\")\n                  .doc(that.props.user?.id)\n                  .set({\n                    ...that.props.user,\n                    quiz: [\n                      ...prevQuiz,\n                      {\n                        uploadTime: firestore.Timestamp.now(),\n                        pdfLink: downloadURL,\n                        storageAddress: fullPath\n                      }\n                    ]\n                  })\n                  .then(() => {\n                    that.setState({\n                      uploading: false,\n                      downloadURL,\n                      fullPath\n                    });\n                  })\n                  .catch(error => {\n                    console.error(error);\n                    Alert.alert(error.message);\n                  });\n              })\n              .catch(error => {\n                console.error(error);\n                Alert.alert(error.message);\n              });\n          }\n        );\n      }\n    } catch (err) {\n      alert(\"Unknown Error: \" + JSON.stringify(err));\n      throw err;\n    }\n  };\n\n  render() {\n    let { user } = this.props;\n    console.log({ user });\n    return (\n      <View>\n        {/* <Button\n          style={{ flex: 1, backgroundColor: \"#4fc3f7\" }}\n          onPress={this.pickDocumentPDF}\n          disabled={this.state.uploading}\n        >\n          {this.state.uploading\n            ? `Uploading ${this.state.progress}%`\n            : \"Upload New\"}\n        </Button> */}\n        {user?.quiz &&\n          user.quiz.map(quiz => {\n            <Card>\n              <Card.Title />\n              <Card.Content>\n                <Title>Qiuz Uploads </Title>\n                <Paragraph>Uploaded: {quiz.uploadTime} </Paragraph>\n                {/* <Paragraph>Time & Date</Paragraph> */}\n              </Card.Content>\n              <Card.Actions>\n                <Button onPress={this.pickDocumentPDF}>\n                  {this.state.uploading\n                    ? `Uploading ${this.state.progress}%`\n                    : \"Upload\"}\n                </Button>\n              </Card.Actions>\n            </Card>;\n          })}\n        <Text>{this.state.fullPath}</Text>\n        <Text>{this.state.downloadURL}</Text>\n      </View>\n    );\n  }\n}\n\nconst mapStatetoProps = state => {\n  console.log({ state });\n  return {\n    user: state.authReducer.user,\n    isAuthenticated: state.authReducer.isAuthenticated\n  };\n};\n\nexport default connect(mapStatetoProps)(QuizUpload);\n"]},"metadata":{},"sourceType":"module"}